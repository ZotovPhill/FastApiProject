"""Create address model. Added relation to employee model.

Revision ID: 4e2a7320f3e6
Revises: efdfe4de1d23
Create Date: 2021-10-07 12:54:19.544092

"""
from alembic import op, context
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4e2a7320f3e6'
down_revision = 'efdfe4de1d23'
branch_labels = None
depends_on = None

def upgrade():
    """alembic -x data=true upgrade head"""
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()

def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()

def schema_upgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('usr_address',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('street', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('zip', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usr_address_id'), 'usr_address', ['id'], unique=False)
    op.drop_index('ix_gds_product_id', table_name='gds_product')
    op.drop_table('gds_product')
    op.drop_index('ix_gds_category_id', table_name='gds_category')
    op.drop_table('gds_category')
    op.drop_index('ix_gds_unit_id', table_name='gds_unit')
    op.drop_table('gds_unit')
    op.add_column('usr_employee', sa.Column('address_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'usr_employee', 'usr_address', ['address_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###

def schema_downgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'usr_employee', type_='foreignkey')
    op.drop_column('usr_employee', 'address_id')
    op.create_table('gds_unit',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gds_unit_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gds_unit_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_gds_unit_id', 'gds_unit', ['id'], unique=False)
    op.create_table('gds_category',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gds_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('numeric_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gds_category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_gds_category_id', 'gds_category', ['id'], unique=False)
    op.create_table('gds_product',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country_of_origin', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('expiration_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unit_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['gds_category.id'], name='gds_product_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['unit_id'], ['gds_unit.id'], name='gds_product_unit_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='gds_product_pkey')
    )
    op.create_index('ix_gds_product_id', 'gds_product', ['id'], unique=False)
    op.drop_index(op.f('ix_usr_address_id'), table_name='usr_address')
    op.drop_table('usr_address')
    # ### end Alembic commands ###

def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass

def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass