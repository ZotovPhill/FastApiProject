"""Added product, category and unit tables.

Revision ID: 80d23f007bd2
Revises: 4e2a7320f3e6
Create Date: 2021-10-18 20:20:28.447574

"""
import sqlalchemy_utils
from alembic import op, context
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '80d23f007bd2'
down_revision = '4e2a7320f3e6'
branch_labels = None
depends_on = None

def upgrade():
    """alembic -x data=true upgrade head"""
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()

def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()

def schema_upgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gds_category',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('root_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['root_id'], ['gds_category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name=op.f('uq_gds_category_name'))
    )
    op.create_index('ix_category_root_id', 'gds_category', ['root_id'], unique=False)
    op.create_table('gds_unit',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name=op.f('uq_gds_unit_name'))
    )
    op.create_table('gds_product',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('country_of_origin', sqlalchemy_utils.types.country.CountryType(length=2), nullable=True),
    sa.Column('expiration_time', sa.DateTime(), nullable=True),
    sa.Column('unit_price', sa.Integer(), nullable=True),
    sa.Column('units_per_package', sa.Integer(), nullable=True),
    sa.Column('units_in_stock', sa.Integer(), nullable=True),
    sa.Column('is_visible', sa.Boolean(), nullable=True),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('unit_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.CheckConstraint('unit_price >= 0', name=op.f('ck_gds_product_unit_price_non_negative_constraint')),
    sa.CheckConstraint('units_in_stock >= 0', name=op.f('ck_gds_product_units_in_stock_non_negative_constraint')),
    sa.CheckConstraint('units_per_package >= 0', name=op.f('ck_gds_product_units_per_package_non_negative_constraint')),
    sa.ForeignKeyConstraint(['category_id'], ['gds_category.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['unit_id'], ['gds_unit.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_product_category_id', 'gds_product', ['category_id'], unique=False)
    op.drop_constraint('usr_employee_email_key', 'usr_employee', type_='unique')
    op.create_unique_constraint(op.f('uq_usr_employee_email'), 'usr_employee', ['email'])
    # ### end Alembic commands ###

def schema_downgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_usr_employee_email'), 'usr_employee', type_='unique')
    op.create_unique_constraint('usr_employee_email_key', 'usr_employee', ['email'])
    op.drop_index('ix_product_category_id', table_name='gds_product')
    op.drop_table('gds_product')
    op.drop_table('gds_unit')
    op.drop_index('ix_category_root_id', table_name='gds_category')
    op.drop_table('gds_category')
    # ### end Alembic commands ###

def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass

def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass