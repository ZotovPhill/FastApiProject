version: "3"
services:
  db:
    image: postgres:12.3-alpine
    container_name: postgres-fapi
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - ./shared-files/database/dump:/app/dump
      - ./shared-files/database/postgresql:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.7.5-management
    container_name: rabbit-mq-fapi
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"

  redis:
    image: redis:alpine
    container_name: redis-fapi
    ports:
      - "6379:6379"

  app:
    build:
      context: .
      dockerfile: system/python/Dockerfile
    container_name: backend-fapi
    entrypoint: ./entrypoint.sh
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./shared-files/logs:/var/logs
      - ./app:/usr/src/fapi/app
      - ./.env:/usr/src/fapi/.env
    env_file:
      .env
    depends_on:
      - rabbitmq
      - redis
      - db

  worker:
    build:
      context: .
      dockerfile: system/python/Dockerfile
    container_name: worker-fapi
    entrypoint: ./entrypoint-celery.sh
    volumes:
      - ./app:/usr/src/fapi/app
      - ./.env:/usr/src/fapi/.env
    env_file:
      .env
    depends_on:
      - app
      - rabbitmq
      - redis

  dashboard:
    image: mher/flower:0.9.5
    container_name: dashboard-fapi
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
      FLOWER_PURGE_OFFLINE_WORKERS: "${FLOWER_PURGE_OFFLINE_WORKERS}"
    depends_on:
      - rabbitmq
      - redis

#   minio:
#     image: bitnami/minio:latest
#     container_name: minio-fapi
#     ports:
#       - "9000:9000"
#     environment:
#       MINIO_SERVER_HOST: "${MINIO_SERVER_HOST}"
#       MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY}"
#       MINIO_SECRET_KEY: "${MINIO_SECRET_KEY}"
#       MINIO_DEFAULT_BUCKETS: "${MINIO_DEFAULT_BUCKETS}"

#   prometheus:
#     image: prom/prometheus
#     volumes:
#       - ./system/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#     ports:
#       - "9090:9090"

#   grafana:
#     image: grafana/grafana
#     depends_on:
#       - prometheus
#     ports:
#       - "3000:3000"

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
#     ports:
#       - "9200:9200"
#       - "9300:9300"
#     configs:
#       - source: elastic_config
#         target: /usr/share/elasticsearch/config/elasticsearch.yml
#     environment:
#       ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
#       ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"
#       # Use single node discovery in order to disable production mode and avoid bootstrap checks.
#       # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#       discovery.type: single-node
#       # Force publishing on the 'elk' overlay.
#       network.publish_host: _eth0_
#     deploy:
#       mode: replicated
#       replicas: 1

#   logstash:
#     image: docker.elastic.co/logstash/logstash:7.15.0
#     ports:
#       - "5044:5044"
#       - "5000:5000"
#       - "9600:9600"
#     configs:
#       - source: logstash_config
#         target: /usr/share/logstash/config/logstash.yml
#       - source: logstash_pipeline
#         target: /usr/share/logstash/pipeline/logstash.conf
#     environment:
#       LS_JAVA_OPTS: "${LS_JAVA_OPTS}"
#     deploy:
#       mode: replicated
#       replicas: 1

#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.15.0
#     ports:
#       - "5601:5601"
#     configs:
#       - source: kibana_config
#         target: /usr/share/kibana/config/kibana.yml
#     deploy:
#       mode: replicated
#       replicas: 1

# configs:
#   elastic_config:
#     file: ./system/elk/elasticsearch/config/elasticsearch.yml
#   logstash_config:
#     file: ./system/elk/logstash/config/logstash.yml
#   logstash_pipeline:
#     file: ./system/elk/logstash/pipeline/logstash.conf
#   kibana_config:
#     file: ./system/elk/kibana/config/kibana.yml
